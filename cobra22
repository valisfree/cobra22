#!/usr/bin/env python3
# Start project April 10, 2019
# valisfree@yandex.ru

import sys

import os # for clearing terminal

class BooksDataBase():
    """ Create books database. Check books in db.
    Add books, and save new position.
    """
    def __init__():
        pass
    def create_bdb():
        pass
    def chek_book():
        pass
    def add_book():
        pass
    def save_book():
        pass

class Book():
    """ Take file location. Check and read file to list words.
    Change number position of list. Give next word.
    """
    def __init__(self, adress, speed=300, cursor=0):
        self.adress = adress
        self.book = []
        self.speed = speed
        self.cursor = cursor
    def _check_file_name(self):
        """ Check file for aviability and ' .txt' ends."""
        flag = 0
        if self.adress.endswith('.txt'):
            flag += 1
        try:
            check_aviability = open(self.adress)
        except IOError as e:
            pass
        else:
            check_aviability.close()
            flag += 1
        if flag == 2:
            return True
        return False
    def load_book(self):
        ''' Load book to list self.book.'''
        if _check_file_name(self.adress):
            with open(self.adress) as book:
                self.book = book.read()
            return True
        return False

    def _check_book_encoding():
        pass
    def next_word(self):
        ''' Return next word. Increases cursor by one.
        Verifies that the cursor does not go beyond the book.
        '''
        if self.cursor + 1 > len(self.book):
            return False
        self.cursor += 1
        return self.book[self.cursor]
class DelayTimer():
    """ Take word. Evaluate and apply delay time.
    """
    def __init__():
        pass

class ProgramSettings():
    """ Add settings file. Read and give values.
    """
    def __init__():
        pass

class Stream():
    """ Class realize program logic. Start\stop, hotkeys.
    """
    def __init__():
        pass
class CheckArgs:
    ''' Coming later '''
    def __init__(self, argv):
        self.argv = argv
        self.len_arg = len(self.argv)
    def all_checks():
        if self.len_arg == 1:
            return False # until sometime
        if self.len_arg == 2:
            self.adress = self.argv[1]
            if check_adress():
                return self.adress
            else:
                return False
        if self.len_arg == 3:
            check_curspeed()
        if self.len.arg == 4:
            check_curspeed()
        if self.len_arg > 4:
            return False
    def check_adress(self):
        if self.adress.endswith('.txt'):
            return True
        return False


class ViewerTerminal:
    ''' Class for view program at the terminal.
    Start flags:
        s=XXX, where XXX - speed at the words per minuts.
            Sample: s=450
        c=XXX, where XXX - cursor position word at the file.
            Sample: c=124
    Full sample: python3 cobra22 book.txt s=450 c=15
    Note: If you do not specify flags, they use default values s=300 c=0.
    You can change default values at the config file.
        '''
    def __init__(self):
        # self.book = Book()
        self.mesages = MessagesTerminal()
        self.hotkeys = HotkeysTerminal()
        self.argv_param = sys.argv
    def _clear_terminal(self):
        ''' Built-in function for clearing terminal. '''
        os.system('clear')
    def _check_argv(self):
        ''' A little check '''
        if len(self.argv_param) > 1:
            return True
        return False
    def start_view(self):
        ''' '''
        # ViewerTerminal()._clear_terminal()
       if ViewerTerminal()._check_argv():
            print(self.argv_param)
            # self.mesages.argv_take_book_adress(self.argv_param[1])



class MessagesTerminal:
    """ Print all text for users
    """
    def __init__(self):
        pass
    def book_not_found(self):
        print("File not found.")
    def hello_message(self):
        print("Cobra22 is reading.")
    def argv_take_book_adress(self, adress):
        ''' Take filename and print that.'''
        print('Book {} is here.'.format(adress))
class HotkeysTerminal:
    def __init__(self):
        pass

cobra22 = ViewerTerminal()
cobra22.start_view()
