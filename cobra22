#!/usr/bin/env python3
''' This is program for fast reading, core for GUI.
    Project started an April 10, 2019.
'''

__author__ = 'Valentin Dubovitskiy'
__date__ = 'Apr 23, 2019'
__contact__ = 'valisfree@yandex.ru'
__version__ = '0.1.0'

import sys
import os # for clearing terminal

class BooksDataBase():
    """ Create books database. Check books in db.
    Add books, and save new position.
    """
    def __init__():
        pass
    def create_bdb():
        pass
    def chek_book():
        pass
    def add_book():
        pass
    def save_book():
        pass

class Book():
    """ Take file location. Check and read file to list words.
    Change number position of list. Give next word.
    """
    def __init__(self, adress, speed=300, cursor=0):
        self.adress = adress
        self.speed = speed
        self.cursor = cursor
        self.book = []
    def _check_file_name(self):
        """ Check file for aviability and ' .txt' ends."""
        flag = 0
        if self.adress.endswith('.txt'):
            flag += 1
        try:
            self.heck_aviability = open(self.adress)
        except IOError as e:
            pass
        else:
            self.heck_aviability.close()
            flag += 1
        if flag == 2:
            return True
        return False
    def load_book(self):
        ''' Load book to list self.book.'''
        if self._check_file_name():
            with open(self.adress) as book:
                self.book = book.read().split()
            print(self.book)
            return True
        return False

    def _check_book_encoding():
        pass
    def next_word(self):
        ''' Return next word. Increases cursor by one.
        Verifies that the cursor does not go beyond the book.
        '''
        if self.cursor + 1 > len(self.book):
            return False
        self.cursor += 1
        return self.book[self.cursor]
class DelayTimer():
    """ Take word. Evaluate and apply delay time.
    """
    def __init__():
        pass

class ProgramSettings():
    """ Add settings file. Read and give values.
    """
    def __init__():
        pass

class Stream():
    """ Class realize program logic. Start\stop, hotkeys.
    """
    def __init__():
        pass

class CheckArgs:
    ''' Coming later '''
    def __init__(self, argv):
        self.argv = argv
        self.len_arg = len(self.argv)
        # Bellow the data will be taken from the settings file
        self.speed_marker = ['s=', 'S=']
        self.speed_min = 50
        self.speed_max = 1500
        self.cursor_marker = ['c=', 'C=']
        self.cursor_min = 0
    def all_checks(self):
        ''' Checks by pattern: name.txt s=55 c=2.
        Return list ['text.txt', 55, 2]
        '''
        self.out_list = []
        if self.len_arg == 1:
            return False # until sometime
        self.adress = self.argv[1]
        if self.check_adress_txt():
            self.out_list.append(self.adress)
        else:
            return False
        if self.len_arg >= 3:
            if self.check_speed():
                self.out_list.append(self.speed)
        if self.len_arg == 4:
            if self.check_cursor():
                self.out_list.append(self.cursor)
        if self.len_arg > 4:
            return False
        return self.out_list
    def check_adress_txt(self):
        ''' Check ending '.txt' '''
        if self.adress.endswith('.txt'):
            return True
        return False
    def check_speed(self):
        ''' Check pattern s=xxx '''
        self.raw_speed = self.argv[2]
        if len(self.raw_speed) < 4:
            return False
        self.raw_speed_maker = self.raw_speed[:2]
        if self.raw_speed_maker in self.speed_marker:
            self.raw_speed_number = self.raw_speed[2:]
            if self.raw_speed_number.isdigit():
                if self.speed_min <= int(self.raw_speed_number):
                    if int(self.raw_speed_number) <= self.speed_max:
                        self.speed = int(self.raw_speed_number)
                        return True
        return False
    def check_cursor(self):
        ''' Check pattern c=xxx '''
        self.raw_cursor = self.argv[3]
        if len(self.raw_cursor) < 3:
            return False
        self.raw_cursor_marker = self.raw_cursor[:2]
        if self.raw_cursor_marker not in self.cursor_marker:
            return false
        self.raw_cursor_number = self.raw_cursor[2:]
        if self.raw_cursor_number.isdigit():
            if int(self.raw_cursor_number) >= self.cursor_min:
                self.cursor = int(self.raw_cursor_number)
                return True
        return False
class MessagesTerminal:
    """ Print all text for users
    """
    '''
    def __init__(self):
        pass
    '''
    def no_argv(self):
        print("The required parameters are not set. Example:")
        print("python3 cobra22 text.txt s=300 c=5")
    def book_not_found(self):
        print("File not found.")
    def hello_message(self):
        print("Cobra22 is reading.")
    def argv_is_ok(self, items):
        ''' Take filename and print that.'''
        print('book is loaded')
class HotkeysTerminal:
    def __init__(self):
        pass
class ViewerTerminal:
    ''' Class for view program at the terminal.
    Start flags:
        s=XXX, where XXX - speed at the words per minuts.
            Sample: s=450
        c=XXX, where XXX - cursor position word at the file.
            Sample: c=124
    Full sample: python3 cobra22 book.txt s=450 c=15
    Note: If you do not specify flags, they use default values s=300 c=0.
    You can change default values at the config file.
        '''
    def __init__(self):
        self.mesages = MessagesTerminal()
        self.hotkeys = HotkeysTerminal()
        self.argv_param = sys.argv
    def _clear_terminal(self):
        ''' Built-in function for clearing terminal. '''
        os.system('clear')
    def _check_argv(self):
        ''' A little check '''
        if len(self.argv_param) > 1:
            self.item = CheckArgs(self.argv_param)
            self.out_list = self.item.all_checks()
            if self.out_list:
                return self.out_list
        return False
    def start_view(self):
        ''' '''
        ViewerTerminal()._clear_terminal()
        self.out_list = self._check_argv()
        if self.out_list:
            self.mesages.argv_is_ok(self.out_list)
        else:
            self.mesages.no_argv()
            exit()
        self.good_book = Book(*self.out_list)
        self.good_book.load_book()
        


def main():
    cobra22 = ViewerTerminal()
    cobra22.start_view()

if __name__ == '__main__':
    main()
